<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExpressionBuilder</name>
    </assembly>
    <members>
        <member name="M:ExpressionBuilder.Attributes.NumberOfValuesAttribute.#ctor(System.Int32)">
            <summary>
            Defines the number of values supported by the operation.
            </summary>
            <param name="numberOfValues">Number of values the operation demands.</param>
        </member>
        <member name="M:ExpressionBuilder.Attributes.SupportedOperationsAttribute.#ctor(ExpressionBuilder.Common.Operation[])">
            <summary>
            Defines operations that are supported by an specific TypeGroup.
            </summary>
            <param name="supportedOperations">List of supported operations.</param>
        </member>
        <member name="T:ExpressionBuilder.Common.FilterStatementConnector">
            <summary>
            Defines how the filter statements will be connected to each other.
            </summary>
        </member>
        <member name="F:ExpressionBuilder.Common.FilterStatementConnector.And">
            <summary>
            Determines that both the current AND the next filter statement needs to be satisfied.
            </summary>
        </member>
        <member name="F:ExpressionBuilder.Common.FilterStatementConnector.Or">
            <summary>
            Determines that the current OR the next filter statement needs to be satisfied.
            </summary>
        </member>
        <member name="T:ExpressionBuilder.Common.Operation">
            <summary>
            Defines the operations supported by the <seealso cref="T:ExpressionBuilder.Builders.FilterBuilder" />.
            </summary>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.EqualTo">
            <summary>
            Targets an object in which the property's value is equal to the provided value.
            </summary>
            <remarks>Accepts one value.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.Contains">
            <summary>
            Targets an object in which the property's value contains part of the provided value.
            </summary>
            <remarks>Accepts one value.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.StartsWith">
            <summary>
            Targets an object in which the property's value starts with the provided value.
            </summary>
            <remarks>Accepts one value.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.EndsWith">
            <summary>
            Targets an object in which the property's value ends with the provided value.
            </summary>
            <remarks>Accepts one value.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.NotEqualTo">
            <summary>
            Targets an object in which the property's value is not equal to the provided value.
            </summary>
            <remarks>Accepts one value.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.GreaterThan">
            <summary>
            Targets an object in which the property's value is greater than the provided value.
            </summary>
            <remarks>Accepts one value.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.GreaterThanOrEqualTo">
            <summary>
            Targets an object in which the property's value is greater than or equal to the provided value.
            </summary>
            <remarks>Accepts one value.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.LessThan">
            <summary>
            Targets an object in which the property's value is less than the provided value.
            </summary>
            <remarks>Accepts one value.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.LessThanOrEqualTo">
            <summary>
            Targets an object in which the property's value is less than or equal to the provided value.
            </summary>
            <remarks>Accepts one value.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.Between">
            <summary>
            Targets an object in which the property's value is between the two provided values (greater than or equal to the first one and less then or equal to the second one).
            </summary>
            <remarks>Accepts two values.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.IsNull">
            <summary>
            Targets an object in which the property's value is null.
            </summary>
            <remarks>Accepts no value at all.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.IsEmpty">
            <summary>
            Targets an object in which the property's value is an empty string.
            </summary>
            <remarks>Accepts no value at all.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.IsNullOrWhiteSpace">
            <summary>
            Targets an object in which the property's value is null or an empty string.
            </summary>
            <remarks>Accepts no value at all.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.IsNotNull">
            <summary>
            Targets an object in which the property's value is not null.
            </summary>
            <remarks>Accepts no value at all.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.IsNotEmpty">
            <summary>
            Targets an object in which the property's value is not an empty string.
            </summary>
            <remarks>Accepts no value at all.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.IsNotNullNorWhiteSpace">
            <summary>
            Targets an object in which the property's value is neither null nor an empty string.
            </summary>
            <remarks>Accepts no value at all.</remarks>
        </member>
        <member name="F:ExpressionBuilder.Common.Operation.In">
            <summary>
            Targets an object in which the provided value is presented in the property's value (as a list).
            </summary>
            <remarks>Accepts one value.</remarks>
        </member>
        <member name="T:ExpressionBuilder.Common.TypeGroup">
            <summary>
            Groups types into simple groups and map the supported operations to each group.
            </summary>
        </member>
        <member name="F:ExpressionBuilder.Common.TypeGroup.Default">
            <summary>
            Default type group, only supports EqualTo and NotEqualTo.
            </summary>
        </member>
        <member name="F:ExpressionBuilder.Common.TypeGroup.Text">
            <summary>
            Supports all text related operations.
            </summary>
        </member>
        <member name="F:ExpressionBuilder.Common.TypeGroup.Number">
            <summary>
            Supports all numeric related operations.
            </summary>
        </member>
        <member name="F:ExpressionBuilder.Common.TypeGroup.Boolean">
            <summary>
            Supports boolean related operations.
            </summary>
        </member>
        <member name="F:ExpressionBuilder.Common.TypeGroup.Date">
            <summary>
            Supports all date related operations.
            </summary>
        </member>
        <member name="F:ExpressionBuilder.Common.TypeGroup.Nullable">
            <summary>
            Supports nullable related operations.
            </summary>
        </member>
        <member name="T:ExpressionBuilder.Helpers.OperationHelper">
            <summary>
            Useful methods regarding <seealso cref="T:ExpressionBuilder.Common.Operation"></seealso>.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Helpers.OperationHelper.#ctor">
            <summary>
            Instantiates a new OperationHelper.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Helpers.OperationHelper.SupportedOperations(System.Type)">
            <summary>
            Retrieves a list of <see cref="T:ExpressionBuilder.Common.Operation"></see> supported by a type.
            </summary>
            <param name="type">Type for which supported operations should be retrieved.</param>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Helpers.OperationHelper.NumberOfValuesAcceptable(ExpressionBuilder.Common.Operation)">
            <summary>
            Retrieves the exactly number of values acceptable by a specific operation.
            </summary>
            <param name="operation"><see cref="T:ExpressionBuilder.Common.Operation"></see> for which the number of values acceptable should be verified.</param>
            <returns></returns>
        </member>
        <member name="T:ExpressionBuilder.Exceptions.WrongNumberOfValuesException">
            <summary>
            Represents an attempt to use an operation providing the wrong number of values.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Exceptions.WrongNumberOfValuesException.Operation">
            <summary>
            Gets the <see cref="P:ExpressionBuilder.Exceptions.WrongNumberOfValuesException.Operation" /> attempted to be used.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Exceptions.WrongNumberOfValuesException.NumberOfValuesAcceptable">
            <summary>
            Gets the number of values acceptable by this <see cref="P:ExpressionBuilder.Exceptions.WrongNumberOfValuesException.Operation" />.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Exceptions.WrongNumberOfValuesException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Exceptions.WrongNumberOfValuesException.#ctor(ExpressionBuilder.Common.Operation)">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressionBuilder.Exceptions.WrongNumberOfValuesException" /> class.
            </summary>
            <param name="operation">Operation used.</param>
        </member>
        <member name="T:ExpressionBuilder.Exceptions.UnsupportedOperationException">
            <summary>
            Represents an attempt to use an operation not currently supported by a type.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Exceptions.UnsupportedOperationException.Operation">
            <summary>
            Gets the <see cref="P:ExpressionBuilder.Exceptions.UnsupportedOperationException.Operation" /> attempted to be used.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Exceptions.UnsupportedOperationException.TypeName">
            <summary>
            Gets name of the type.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Exceptions.UnsupportedOperationException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Exceptions.UnsupportedOperationException.#ctor(ExpressionBuilder.Common.Operation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressionBuilder.Exceptions.UnsupportedOperationException" /> class.
            </summary>
            <param name="operation">Operation used.</param>
            <param name="typeName">Name of the type</param>
        </member>
        <member name="T:ExpressionBuilder.Generics.FilterStatement`1">
            <summary>
            Defines how a property should be filtered.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Generics.FilterStatement`1.Connector">
            <summary>
            Establishes how this filter statement will connect to the next one. 
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Generics.FilterStatement`1.PropertyId">
            <summary>
            Property identifier conventionalized by for the Expression Builder.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Generics.FilterStatement`1.Operation">
            <summary>
            Express the interaction between the property and the constant value defined in this filter statement.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Generics.FilterStatement`1.Value">
            <summary>
            Constant value that will interact with the property defined in this filter statement.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Generics.FilterStatement`1.Value2">
            <summary>
            Constant value that will interact with the property defined in this filter statement when the operation demands a second value to compare to.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Generics.FilterStatement`1.#ctor(System.String,ExpressionBuilder.Common.Operation,`0,`0,ExpressionBuilder.Common.FilterStatementConnector)">
            <summary>
            Instantiates a new <see cref="T:ExpressionBuilder.Generics.FilterStatement`1" />.
            </summary>
            <param name="propertyId"></param>
            <param name="operation"></param>
            <param name="value"></param>
            <param name="value2"></param>
            <param name="connector"></param>
        </member>
        <member name="M:ExpressionBuilder.Generics.FilterStatement`1.#ctor">
            <summary>
            Instantiates a new <see cref="T:ExpressionBuilder.Generics.FilterStatement`1" />.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Generics.FilterStatement`1.Validate">
            <summary>
            Validates the FilterStatement regarding the number of provided values and supported operations.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Generics.FilterStatement`1.ToString">
            <summary>
            String representation of <see cref="T:ExpressionBuilder.Generics.FilterStatement`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Generics.FilterStatement`1.GetSchema">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Generics.FilterStatement`1.ReadXml(System.Xml.XmlReader)">
            <summary>
             Generates an object from its XML representation.
            </summary>
            <param name="reader">The System.Xml.XmlReader stream from which the object is deserialized.</param>
        </member>
        <member name="M:ExpressionBuilder.Generics.FilterStatement`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream to which the object is serialized.</param>
        </member>
        <member name="T:ExpressionBuilder.Generics.Filter`1">
            <summary>
            Aggregates <see cref="T:ExpressionBuilder.Generics.FilterStatement`1" /> and build them into a LINQ expression.
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="P:ExpressionBuilder.Generics.Filter`1.Statements">
            <summary>
            List of <see cref="T:ExpressionBuilder.Interfaces.IFilterStatement" /> that will be combined and built into a LINQ expression.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Generics.Filter`1.#ctor">
            <summary>
            Instantiates a new <see cref="T:ExpressionBuilder.Generics.Filter`1" />
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Generics.Filter`1.By(System.String,ExpressionBuilder.Common.Operation,ExpressionBuilder.Common.FilterStatementConnector)">
            <summary>
            Adds a new <see cref="T:ExpressionBuilder.Generics.FilterStatement`1" /> to the <see cref="T:ExpressionBuilder.Generics.Filter`1" />.
            (To be used by <see cref="T:ExpressionBuilder.Common.Operation" /> that need no values)
            </summary>
            <param name="propertyId">Property identifier conventionalized by for the Expression Builder.</param>
            <param name="operation"></param>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Generics.Filter`1.By``1(System.String,ExpressionBuilder.Common.Operation,``0,``0,ExpressionBuilder.Common.FilterStatementConnector)">
            <summary>
            Adds a new <see cref="T:ExpressionBuilder.Generics.FilterStatement`1" /> to the <see cref="T:ExpressionBuilder.Generics.Filter`1" />.
            </summary>
            <typeparam name="TPropertyType"></typeparam>
            <param name="propertyId">Property identifier conventionalized by for the Expression Builder.</param>
            <param name="operation"></param>
            <param name="value"></param>
            <param name="value2"></param>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Generics.Filter`1.Clear">
            <summary>
            Removes all <see cref="T:ExpressionBuilder.Generics.FilterStatement`1" />, leaving the <see cref="T:ExpressionBuilder.Generics.Filter`1" /> empty.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Generics.Filter`1.op_Implicit(ExpressionBuilder.Generics.Filter{`0})~System.Func{`0,System.Boolean}">
            <summary>
            Implicitly converts a <see cref="T:ExpressionBuilder.Generics.Filter`1" /> into a <see cref="T:System.Func`2" />.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:ExpressionBuilder.Generics.Filter`1.ToString">
            <summary>
            String representation of <see cref="T:ExpressionBuilder.Generics.Filter`1" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Generics.Filter`1.GetSchema">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Generics.Filter`1.ReadXml(System.Xml.XmlReader)">
            <summary>
             Generates an object from its XML representation.
            </summary>
            <param name="reader">The System.Xml.XmlReader stream from which the object is deserialized.</param>
        </member>
        <member name="M:ExpressionBuilder.Generics.Filter`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream to which the object is serialized.</param>
        </member>
        <member name="T:ExpressionBuilder.Generics.FilterStatementConnection`1">
            <summary>
            Connects to FilterStatement together.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Generics.FilterStatementConnection`1.And">
            <summary>
            Defines that the last filter statement will connect to the next one using the 'AND' logical operator.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Generics.FilterStatementConnection`1.Or">
            <summary>
            Defines that the last filter statement will connect to the next one using the 'OR' logical operator.
            </summary>
        </member>
        <member name="T:ExpressionBuilder.Interfaces.IFilter">
            <summary>
            Defines a filter from which a expression will be built.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Interfaces.IFilter.Statements">
            <summary>
            Group of statements that compose this filter.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Interfaces.IFilter.By(System.String,ExpressionBuilder.Common.Operation,ExpressionBuilder.Common.FilterStatementConnector)">
            <summary>
            Add a statement, that doesn't need value, to this filter.
            </summary>
            <param name="propertyId">Property identifier conventionalized by for the Expression Builder.</param>
            <param name="operation">Express the interaction between the property and the constant value.</param>
            <param name="connector">Establishes how this filter statement will connect to the next one.</param>
            <returns>A FilterStatementConnection object that defines how this statement will be connected to the next one.</returns>
        </member>
        <member name="M:ExpressionBuilder.Interfaces.IFilter.By``1(System.String,ExpressionBuilder.Common.Operation,``0,``0,ExpressionBuilder.Common.FilterStatementConnector)">
            <summary>
            Adds another statement to this filter.
            </summary>
            <param name="propertyId">Name of the property that will be filtered.</param>
            <param name="operation">Express the interaction between the property and the constant value.</param>
            <param name="value">Constant value that will interact with the property, required by operations that demands one value or more.</param>
            <param name="value2">Constant value that will interact with the property, required by operations that demands two values.</param>
            <param name="connector">Establishes how this filter statement will connect to the next one.</param>
            <returns>A FilterStatementConnection object that defines how this statement will be connected to the next one.</returns>
        </member>
        <member name="M:ExpressionBuilder.Interfaces.IFilter.Clear">
            <summary>
            Removes all statements from this filter.
            </summary>
        </member>
        <member name="T:ExpressionBuilder.Interfaces.IFilterStatementConnection">
            <summary>
            Connects to FilterStatement together.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Interfaces.IFilterStatementConnection.And">
            <summary>
            Defines that the last filter statement will connect to the next one using the 'AND' logical operator.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Interfaces.IFilterStatementConnection.Or">
            <summary>
            Defines that the last filter statement will connect to the next one using the 'OR' logical operator.
            </summary>
        </member>
        <member name="T:ExpressionBuilder.Interfaces.IFilterStatement">
            <summary>
            Defines how a property should be filtered.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Interfaces.IFilterStatement.Connector">
            <summary>
            Establishes how this filter statement will connect to the next one. 
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Interfaces.IFilterStatement.PropertyId">
            <summary>
            Property identifier conventionalized by for the Expression Builder.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Interfaces.IFilterStatement.Operation">
            <summary>
            Express the interaction between the property and the constant value defined in this filter statement.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Interfaces.IFilterStatement.Value">
            <summary>
            Constant value that will interact with the property defined in this filter statement.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Interfaces.IFilterStatement.Value2">
            <summary>
            Constant value that will interact with the property defined in this filter statement when the operation demands a second value to compare to.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Interfaces.IFilterStatement.Validate">
            <summary>
            Validates the FilterStatement regarding the number of provided values and supported operations.
            </summary>
        </member>
        <member name="T:ExpressionBuilder.Interfaces.IOperationHelper">
            <summary>
            Useful methods regarding <seealso cref="T:ExpressionBuilder.Common.Operation"></seealso>.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Interfaces.IOperationHelper.SupportedOperations(System.Type)">
            <summary>
            Retrieves a list of <see cref="T:ExpressionBuilder.Common.Operation"></see> supported by a type.
            </summary>
            <param name="type">Type for which supported operations should be retrieved.</param>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Interfaces.IOperationHelper.NumberOfValuesAcceptable(ExpressionBuilder.Common.Operation)">
            <summary>
            Retrieves the exactly number of values acceptable by a specific operation.
            </summary>
            <param name="operation"><see cref="T:ExpressionBuilder.Common.Operation"></see> for which the number of values acceptable should be verified.</param>
            <returns></returns>
        </member>
        <member name="T:ExpressionBuilder.Interfaces.IPropertyCollection">
            <summary>
            Collection of <see cref="T:ExpressionBuilder.Resources.Property" />.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Interfaces.IPropertyCollection.Type">
            <summary>
            Type from which the properties are loaded.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Interfaces.IPropertyCollection.ResourceManager">
            <summary>
            ResourceManager which the properties descriptions should be gotten from.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Interfaces.IPropertyCollection.Item(System.String)">
            <summary>
            Retrieves a property based on its Id.
            </summary>
            <param name="propertyId">Property conventionalized <see cref="P:ExpressionBuilder.Resources.Property.Id" />.</param>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Interfaces.IPropertyCollection.LoadProperties(System.Resources.ResourceManager)">
            <summary>
            Loads the properties names from the specified ResourceManager.
            </summary>
            <param name="resourceManager"></param>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Interfaces.IPropertyCollection.ToList">
            <summary>
            Converts the collection into a list.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ExpressionBuilder.Resources.OperationGlobalizationExtensionMethods">
            <summary>
            Extension methods for <see cref="T:ExpressionBuilder.Common.Operation" />.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Resources.OperationGlobalizationExtensionMethods.GetDescription(ExpressionBuilder.Common.Operation,System.Resources.ResourceManager)">
            <summary>
            Retrieves the description for an operation from the specified resource manager.
            If it's not possible to find a key that matches the operation value, then
            the operation value itself will be return as the description.
            </summary>
            <param name="operation">Operation which description should be returned.</param>
            <param name="resourceManager">ResourceManager where the description can be found.</param>
            <returns></returns>
        </member>
        <member name="T:ExpressionBuilder.Resources.Property">
            <summary>
            Provides information on the property to the Expression Builder.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Resources.Property.Id">
            <summary>
            Property identifier conventionalized by for the Expression Builder.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Resources.Property.Name">
            <summary>
            Property name obtained from a ResourceManager, or the property's original name (in the absence of a ResourceManager correspondent value).
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Resources.Property.Info">
            <summary>
            Property metadata.
            </summary>
        </member>
        <member name="M:ExpressionBuilder.Resources.Property.ToString">
            <summary>
            String representation of <see cref="T:ExpressionBuilder.Resources.Property" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ExpressionBuilder.Resources.PropertyCollection">
            <summary>
            Collection of <see cref="T:ExpressionBuilder.Resources.Property" />.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Resources.PropertyCollection.Type">
            <summary>
            Type from which the properties are loaded.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Resources.PropertyCollection.ResourceManager">
            <summary>
            ResourceManager which the properties descriptions should be gotten from.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Resources.PropertyCollection.Count">
            <summary>
            Gets the number of <see cref="T:ExpressionBuilder.Resources.Property" /> contained in the <see cref="T:ExpressionBuilder.Resources.PropertyCollection" />.
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Resources.PropertyCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Resources.PropertyCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExpressionBuilder.Resources.PropertyCollection.Item(System.String)">
            <summary>
            Retrieves a property based on its Id.
            </summary>
            <param name="propertyId">Property conventionalized <see cref="P:ExpressionBuilder.Resources.Property.Id" />.</param>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Resources.PropertyCollection.#ctor(System.Type)">
            <summary>
            Instantiates a new <see cref="T:ExpressionBuilder.Resources.PropertyCollection" />.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ExpressionBuilder.Resources.PropertyCollection.#ctor(System.Type,System.Resources.ResourceManager)">
            <summary>
            Instantiates a new <see cref="T:ExpressionBuilder.Resources.PropertyCollection" />.
            </summary>
            <param name="type"></param>
            <param name="resourceManager"></param>
        </member>
        <member name="M:ExpressionBuilder.Resources.PropertyCollection.LoadProperties(System.Resources.ResourceManager)">
            <summary>
            Loads the properties names from the specified ResourceManager.
            </summary>
            <param name="resourceManager"></param>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Resources.PropertyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:ExpressionBuilder.Resources.PropertyCollection" /> to an System.Array,
            starting at a particular System.Array index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements copied
            from System.Collections.ICollection. The System.Array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:ExpressionBuilder.Resources.PropertyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExpressionBuilder.Resources.PropertyCollection.ToList">
            <summary>
            Converts the collection into a list.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
